package models.services {import com.adobe.serialization.json.JSON;import events.CustomPlayerEvent;import flash.display.Shape;import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.SecurityErrorEvent;import flash.net.URLLoader;import flash.net.URLRequestMethod;import models.Config;import models.ModelMain;import models.RequestVO;/** * @author "[CREATED BY ...]" */public class ServiceAPI extends Shape {    private var modelInst:ModelMain;    public var api_url:String = Config.DEFAULT_API_URL;    public function ServiceAPI() {        modelInst = ModelMain.getInstance();    }    public function makeRequest(request_vo:RequestVO):void {        trace("ServiceSystem > makeRequest: " + request_vo.type)        if(request_vo.method == URLRequestMethod.PUT){            var jsHandler:JSPlayerActivator = new JSPlayerActivator(modelInst.token, request_vo);            jsHandler.addEventListener(Event.COMPLETE, handlePlayerActivationResult);            jsHandler.activatePlayer();        } else {            var loader:CustomURLLoader = new CustomURLLoader();            addLoaderListeners(loader);            try {                loader.makeRequest(request_vo);            } catch (error:Error) {                request_vo.error_msg =  error.message;                dispatchEvent(new CustomPlayerEvent(CustomPlayerEvent.INIT_DATA_ERROR, request_vo));            }        }    }    private function handlePlayerActivationResult(event:Event):void {        (event.target as JSPlayerActivator).removeEventListener(Event.COMPLETE, handlePlayerActivationResult);        var request_vo:RequestVO = (event.target as JSPlayerActivator).request_vo;//        try {//            request_vo.response_obj = JSON.decode((promise.result as RESTEvent).response, false);            request_vo.response_obj = (event.target as JSPlayerActivator).response;            dispatchEvent(new CustomPlayerEvent(CustomPlayerEvent.INIT_DATA_GOT_SUCCESS, request_vo));        } catch (error:Error) {            request_vo.error_msg = error.message;            dispatchEvent(new CustomPlayerEvent(CustomPlayerEvent.INIT_DATA_ERROR, request_vo));            return;        }    }////    private function handleActivateRequestResult(promise:Promise):void {//        trace("handleResultA, promise.request_vo = " + (promise.result as RESTEvent).response);//////////        var request_vo:RequestVO = promise.request_vo;//////        try {////            request_vo.response_obj = JSON.decode((promise.result as RESTEvent).response, false);//            request_vo.response_obj = JSON.parse((promise.result as RESTEvent).response);//            dispatchEvent(new CustomModelEvent(CustomModelEvent.INIT_DATA_GOT_SUCCESS, request_vo));////        } catch (error:Error) {//            request_vo.error_msg = error.message;//            dispatchEvent(new CustomModelEvent(CustomModelEvent.INIT_DATA_ERROR, request_vo));//            return;//        }////    }    private function addLoaderListeners(loader:URLLoader){        loader.addEventListener(Event.COMPLETE, handleLoadingSuccess);        loader.addEventListener(IOErrorEvent.IO_ERROR, handleLoadingError);        loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleLoadingError);    }    private function removeLoaderListeners(loader:URLLoader){        loader.removeEventListener(Event.COMPLETE, handleLoadingSuccess);        loader.removeEventListener(IOErrorEvent.IO_ERROR, handleLoadingError);        loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleLoadingError);    }    private function handleLoadingSuccess(event:Event):void {        trace(this, event.target.data, "SHELL>ServiceSystem", "handleXmlLoadingComplete(event.target.data)");        var loader:CustomURLLoader = event.target as CustomURLLoader;        removeLoaderListeners(loader);        var request_vo:RequestVO = loader.request_vo;        try {//            request_vo.response_obj = JSON.decode(event.target.data, false);            request_vo.response_obj = JSON.parse(event.target.data);            dispatchEvent(new CustomPlayerEvent(CustomPlayerEvent.INIT_DATA_GOT_SUCCESS, request_vo));        } catch (error:Error) {            request_vo.error_msg = error.message;            dispatchEvent(new CustomPlayerEvent(CustomPlayerEvent.INIT_DATA_ERROR, request_vo));            return;        }    }    private function handleLoadingError(event:*):void {        var loader:CustomURLLoader = event.target as CustomURLLoader;        removeLoaderListeners(loader);        var request_vo:RequestVO = loader.request_vo;        request_vo.error_msg = event.text;        dispatchEvent(new CustomPlayerEvent(CustomPlayerEvent.INIT_DATA_ERROR, request_vo));    }}}